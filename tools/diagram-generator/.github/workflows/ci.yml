name: CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'tools/diagram-generator/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'tools/diagram-generator/**'

defaults:
  run:
    working-directory: tools/diagram-generator

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run linting with Ruff
      run: |
        ruff check src/ tests/

    - name: Run formatting check with Black
      run: |
        black --check src/ tests/

    - name: Run import sorting check with isort
      run: |
        isort --check-only src/ tests/

    - name: Run type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run tests with pytest
      run: |
        pytest --cov=diagram_generator --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./tools/diagram-generator/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run security checks with Bandit
      run: |
        bandit -r src/ -c pyproject.toml

    - name: Run dependency vulnerability check with Safety
      run: |
        safety check --json || true  # Don't fail on vulnerabilities for now

  build:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: tools/diagram-generator/dist/
